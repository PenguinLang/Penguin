Note its not well organized the proper documentation will be written later


Keywords:-
	display
	else
	fixed
	function
	if
	lengthOf
	let
	nothing
	read
	return
	returns
	using
	while

Operators:-
	Unary Operators:-
		postfix:-
		   expr++
		   expr--
		prefix:-
			!expr
			~expr
			--expr
			++expr
			+expr
			-expr
	Arithmetic Operators:-
		+
		-
		*
		/
		%
		^
	Relational Operators:-
		<
		>
		==
		!=
		<=
		>=
	Logical Operators:-
		&&
		||
	Assignment Operators:-
		=
		+=
		-=
		*=
		/=
		%=

Data Types:-
	number (can be a 64 bit integer or float)
	string
	character
	boolean

Escape Sequences:-
	\n
	\b
	\t
	\f
	\r
	\"
	\'
    \\

Declaration Statements:-
	Declare variable:-
		let <data type> <identifier> = <expression>;
			Examples:-
				let number x = 1; //expression must evaluate to a number literal
				let number y = 1.2;
				let string hello = "Hello, World"; //supports escape sequences
				let character ch = 'a'; //any character supports escape sequences
	Declare constants:-
			fixed <data type> <identifier> = <literal>;
				Examples:-
					fixed number x = 1; //expression must evaluate to a number literal
					fixed number y = 1.2;
					fixed string hello = "Hello, World"; //supports escape sequences
					fixed character ch = 'a'; //any character supports escape sequences
	Declare Array:-
		let <data type>[] <identifier> = <data type>[<size>];
		let <data type>[] <identifier> = <data type>[]{<elements>,<elements>,<elements>};
			Example:-
				let string[] names = string[10];
				let number[] digits = number[]{0,1,2,3,4,5,6,7,8,9};
		}
Control Statements:-
	Decision Making statements:-
		If:-
			if <condition> {
				//block of statements to run
			}
		If Else:-
			if <condition> {
				//block of statements to run
			} else {
				//block of statement to run
			}
		If Else If Ladder:-
			if <condition> {
				//block of statements to run
			} else if <condition> {
				//block of statements to run
			} else {
				//block of statements to run
			}

		Example:-
			if x < 10 {
				x = 20;
			} else if x > 20 && x < 100 {
				x = 120;
			} else {
				x = 0;
			}
	Loop statement:-
		While:-
			while <condition> {
				//do stuff
			}
			Example:-
				let number x = 10;
				while x > 0 {
					x = x - 1;
					display "HELLO";
				}

	Jump statements:-
		break statement:-
			break;
				Example:-
					while true {
						break;
					}
		continue statement:-
			continue;
				Example:-
					while true {
						if x == 10 {
							continue;
						}
					}

	Return statement:-
		return <expression>;


Array Access:-
	<array>[<position>]
		Example
			let number[] numbers = number[3];
			numbers[0] = 1;
			numbers[1] = 2;
			numbers[2] = 3;

			display numbers[2];

Function declaration:-
	function <identifier> using (<parameter/parameters>) returns <data type/nothing> {
		//function body
	}
		Example:-
		1) With no parameter and returns nothing
			function hello using () returns nothing {
				//do stuff
			}
		2) With single parameter and returns number
			function addOne using (number x) returns number {
				return x + 1;
			}
		3) With Multiple Parameter and returns number
			function add(number x, number y) returns number {
				return x + y;
			}

Main Function (Special Function):-
The program start executing from main function
	function main using (string[] arguments) returns nothing {
		//execution starts from this function
	}